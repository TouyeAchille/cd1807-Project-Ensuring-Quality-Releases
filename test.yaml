name: assurance-quality-pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  tfWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
  azureRg: 'Azuredevops' 
  containerName: 'tfstate' 
  storageAccountName: 'tfstate87207196' 
  blobname: 'test.terraform.tfstate'
  # Environment name
  environmentName: 'test-vm-agent'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
      - script: |
          sudo apt-get update
          sudo apt-get install -y unzip
        displayName: 'Install unzip'

      # Use Terraform to create the Infrastructure      
      # Install Terraform on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Terrafom installation'
        inputs:
          terraformVersion: '1.13.2'
      
      # Run Terraform Init on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: 'Terrafom init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          backendServiceArm: '$(azureServiceConnectionId)'
          backendAzureRmResourceGroupName: '$(azureRg)'
          backendAzureRmStorageAccountName: '$(storageAccountName)'
          backendAzureRmContainerName: '$(containerName)'
          backendAzureRmKey: '$(blobname)'
        
  
      
      # Run Terraform Validate
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: Terraform validate
        inputs:
          provider: 'azurerm'
          command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    
    #- task: InstallSSHKey@0
     # inputs:
       # knownHostsEntry: 'KNOWN_HOSTS_STRING' 
        #sshPublicKey: 'PUBLIC_KEY'            
        #sshKeySecureFile: 'id_rsa'   # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: Terraform apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(tfWorkingDirectory)'
          environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

